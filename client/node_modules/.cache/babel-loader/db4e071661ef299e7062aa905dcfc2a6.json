{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  isLoggedIn: false,\n  userBooks: []\n};\nexport const getUserBooks = createAsyncThunk(\"library/getUserBooks\", async () => {\n  console.log(\"a\");\n  const response = await axios.get(\"/api/library/\");\n  return response.data;\n});\nexport const submitRating = createAsyncThunk(\"library/submitRating\", async bookObj => {\n  const {\n    book,\n    rating\n  } = bookObj;\n  const response = await axios.post(\"/api/library/rate\", {\n    book,\n    rating\n  });\n  return response.data;\n});\nconst librarySlice = createSlice({\n  name: \"library\",\n  initialState,\n  reducers: {\n    toggleIsLoggedIn(state, action) {\n      state.isLoggedIn = !state.isLoggedIn;\n      return state;\n    },\n\n    purgeNonUser(state, action) {\n      if (action.payload === \"id\") {\n        const newState = state.userBooks.filter(book => book && book.book_id);\n        state.userBooks = [...newState];\n      } else {\n        if (!action.payload) {\n          const newState = state.userBooks.filter(book => book.booklists && book.booklists.length > 0 && book);\n          state.userBooks = [...newState];\n        }\n      }\n\n      return state;\n    },\n\n    updateUserBooks(state, action) {\n      const targetBookId = action.payload.book_id;\n      const newState = state.userBooks.filter(book => book.book_id !== targetBookId);\n      state.userBooks = [...newState, action.payload];\n      return state;\n    },\n\n    updateBooklistName(state, action) {\n      if (action.payload.type === \"delete\") {\n        for (let i = 0; i < state.userBooks.length; i++) {\n          if (state.userBooks[i].booklists.includes(action.payload.oldName)) {\n            state.userBooks[i].booklists.splice(state.userBooks[i].booklists.indexOf(action.payload.oldName));\n          }\n        }\n      } else {\n        for (let i = 0; i < state.userBooks.length; i++) {\n          if (state.userBooks[i].booklists.includes(action.payload.oldName)) {\n            state.userBooks[i].booklists.splice(state.userBooks[i].booklists.indexOf(action.payload.oldName));\n            state.userBooks[i].booklists.push(action.payload.newName);\n          }\n        }\n      }\n\n      return state;\n    },\n\n    clearBooklists(state, action) {\n      state.userBooks = action.payload;\n      return state;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(getUserBooks.fulfilled, (state, action) => {\n      const {\n        payload\n      } = action;\n      state.userBooks = [...payload];\n      return state;\n    }).addCase(submitRating.fulfilled, (state, action) => {\n      return state;\n    });\n  }\n});\nexport const {\n  toggleIsLoggedIn,\n  clearBooklists,\n  purgeNonUser,\n  updateUserBooks,\n  updateBooklistName\n} = librarySlice.actions;\nexport default librarySlice.reducer;","map":{"version":3,"sources":["C:/Users/KASIM/Documents/bookist-alpha/client/src/services/librarySlice.js"],"names":["createSlice","createAsyncThunk","axios","initialState","isLoggedIn","userBooks","getUserBooks","console","log","response","get","data","submitRating","bookObj","book","rating","post","librarySlice","name","reducers","toggleIsLoggedIn","state","action","purgeNonUser","payload","newState","filter","book_id","booklists","length","updateUserBooks","targetBookId","updateBooklistName","type","i","includes","oldName","splice","indexOf","push","newName","clearBooklists","extraReducers","builder","addCase","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst initialState = {\r\n   isLoggedIn: false,\r\n   userBooks: [],\r\n};\r\n\r\nexport const getUserBooks = createAsyncThunk(\r\n   \"library/getUserBooks\",\r\n   async () => {\r\n      console.log(\"a\");\r\n      const response = await axios.get(\"/api/library/\");\r\n      return response.data;\r\n   }\r\n);\r\n\r\nexport const submitRating = createAsyncThunk(\r\n   \"library/submitRating\",\r\n   async (bookObj) => {\r\n      const { book, rating } = bookObj;\r\n      const response = await axios.post(\"/api/library/rate\", { book, rating });\r\n      return response.data;\r\n   }\r\n);\r\n\r\nconst librarySlice = createSlice({\r\n   name: \"library\",\r\n   initialState,\r\n   reducers: {\r\n      toggleIsLoggedIn(state, action) {\r\n         state.isLoggedIn = !state.isLoggedIn;\r\n         return state;\r\n      },\r\n\r\n      purgeNonUser(state, action) {\r\n         if (action.payload === \"id\") {\r\n            const newState = state.userBooks.filter(\r\n               (book) => book && book.book_id\r\n            );\r\n            state.userBooks = [...newState];\r\n         } else {\r\n            if (!action.payload) {\r\n               const newState = state.userBooks.filter(\r\n                  (book) => book.booklists && book.booklists.length > 0 && book\r\n               );\r\n               state.userBooks = [...newState];\r\n            }\r\n         }\r\n         return state;\r\n      },\r\n\r\n      updateUserBooks(state, action) {\r\n         const targetBookId = action.payload.book_id;\r\n         const newState = state.userBooks.filter(\r\n            (book) => book.book_id !== targetBookId\r\n         );\r\n         state.userBooks = [...newState, action.payload];\r\n         return state;\r\n      },\r\n\r\n      updateBooklistName(state, action) {\r\n         if (action.payload.type === \"delete\") {\r\n            for (let i = 0; i < state.userBooks.length; i++) {\r\n               if (\r\n                  state.userBooks[i].booklists.includes(action.payload.oldName)\r\n               ) {\r\n                  state.userBooks[i].booklists.splice(\r\n                     state.userBooks[i].booklists.indexOf(\r\n                        action.payload.oldName\r\n                     )\r\n                  );\r\n               }\r\n            }\r\n         } else {\r\n            for (let i = 0; i < state.userBooks.length; i++) {\r\n               if (\r\n                  state.userBooks[i].booklists.includes(action.payload.oldName)\r\n               ) {\r\n                  state.userBooks[i].booklists.splice(\r\n                     state.userBooks[i].booklists.indexOf(\r\n                        action.payload.oldName\r\n                     )\r\n                  );\r\n                  state.userBooks[i].booklists.push(action.payload.newName);\r\n               }\r\n            }\r\n         }\r\n         return state;\r\n      },\r\n\r\n      clearBooklists(state, action) {\r\n         state.userBooks = action.payload;\r\n         return state;\r\n      },\r\n   },\r\n   extraReducers: (builder) => {\r\n      builder\r\n         .addCase(getUserBooks.fulfilled, (state, action) => {\r\n            const { payload } = action;\r\n            state.userBooks = [...payload];\r\n            return state;\r\n         })\r\n         .addCase(submitRating.fulfilled, (state, action) => {\r\n            return state;\r\n         });\r\n   },\r\n});\r\n\r\nexport const {\r\n   toggleIsLoggedIn,\r\n   clearBooklists,\r\n   purgeNonUser,\r\n   updateUserBooks,\r\n   updateBooklistName,\r\n} = librarySlice.actions;\r\nexport default librarySlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}