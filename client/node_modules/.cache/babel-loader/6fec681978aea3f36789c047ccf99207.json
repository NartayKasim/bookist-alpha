{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport librarySlice from \"../services/librarySlice.js\";\nimport volumeInfoSlice from \"../services/volumeInfoSlice.js\";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from \"redux-persist\";\nimport { combineReducers } from \"redux\";\nimport storageSession from \"redux-persist/lib/storage/session\";\nconst persistConfig = {\n  key: \"root\",\n  version: 1,\n  storage: storageSession\n};\nconst rootReducer = combineReducers({\n  volume_info: volumeInfoSlice,\n  library: librarySlice\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nexport let persistor = persistStore(store);\nexport default store;","map":{"version":3,"sources":["C:/Users/KASIM/Documents/bookist-alpha/client/src/app/store.js"],"names":["configureStore","librarySlice","volumeInfoSlice","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","combineReducers","storageSession","persistConfig","key","version","storage","rootReducer","volume_info","library","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AAEA,SACGC,YADH,EAEGC,cAFH,EAGGC,KAHH,EAIGC,SAJH,EAKGC,KALH,EAMGC,OANH,EAOGC,KAPH,EAQGC,QARH,QASO,eATP;AAUA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AAEA,MAAMC,aAAa,GAAG;AACnBC,EAAAA,GAAG,EAAE,MADc;AAEnBC,EAAAA,OAAO,EAAE,CAFU;AAGnBC,EAAAA,OAAO,EAAEJ;AAHU,CAAtB;AAMA,MAAMK,WAAW,GAAGN,eAAe,CAAC;AACjCO,EAAAA,WAAW,EAAEhB,eADoB;AAEjCiB,EAAAA,OAAO,EAAElB;AAFwB,CAAD,CAAnC;AAKA,MAAMmB,gBAAgB,GAAGhB,cAAc,CAACS,aAAD,EAAgBI,WAAhB,CAAvC;AAEA,MAAMI,KAAK,GAAGrB,cAAc,CAAC;AAC1BsB,EAAAA,OAAO,EAAEF,gBADiB;AAE1BG,EAAAA,UAAU,EAAGC,oBAAD,IACTA,oBAAoB,CAAC;AAClBC,IAAAA,iBAAiB,EAAE;AAChBC,MAAAA,cAAc,EAAE,CAACrB,KAAD,EAAQC,SAAR,EAAmBC,KAAnB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,QAA1C;AADA;AADD,GAAD;AAHG,CAAD,CAA5B;AAUA,OAAO,IAAIiB,SAAS,GAAGxB,YAAY,CAACkB,KAAD,CAA5B;AACP,eAAeA,KAAf","sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\r\nimport librarySlice from \"../services/librarySlice.js\";\r\nimport volumeInfoSlice from \"../services/volumeInfoSlice.js\";\r\n\r\nimport {\r\n   persistStore,\r\n   persistReducer,\r\n   FLUSH,\r\n   REHYDRATE,\r\n   PAUSE,\r\n   PERSIST,\r\n   PURGE,\r\n   REGISTER,\r\n} from \"redux-persist\";\r\nimport { combineReducers } from \"redux\";\r\nimport storageSession from \"redux-persist/lib/storage/session\";\r\n\r\nconst persistConfig = {\r\n   key: \"root\",\r\n   version: 1,\r\n   storage: storageSession,\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n   volume_info: volumeInfoSlice,\r\n   library: librarySlice,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n   reducer: persistedReducer,\r\n   middleware: (getDefaultMiddleware) =>\r\n      getDefaultMiddleware({\r\n         serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n         },\r\n      }),\r\n});\r\n\r\nexport let persistor = persistStore(store);\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}